%{
#include <math.h>
%}

%union
{
	int num;
	char *lexeme;
}

%token <lexeme> ID
%token <num> CONSTANT
%token OP_ASSIGN
%token OP_PLUS
%token OP_MINUS
%token OP_TIMES
%token OP_DIVIDE
%token MK_LPAREN
%token MK_RPAREN

%right '='
%left '-' '+'
%left '*' '/'

%type <lexeme> expr

%% /* Grammar rules and actions follow */

input:	/* empty */
		| input expr
;

expr:	ID OP_ASSIGN expr	{ printf("lval %s\n", $1); $$ = $3;	printf("=\n");}
		| ID				{ printf("rval %s\n", $1);		}
		| CONSTANT			{ printf("%d\n", $1);			}
		| expr '+' expr		{ $$ = $1; $$ = $3; printf("+\n");	}
		| expr '-' expr		{ $$ = $1; $$ = $3; printf("-\n");	}
		| expr '*' expr		{ $$ = $1; $$ = $3; printf("*\n");	}
		| expr '/' expr		{ $$ = $1; $$ = $3; printf("/\n");	}
		| '(' expr ')'		{ $$ = $2; }
;

%%

#include <ctype.h>

main ()
{
  yyparse ();
}

#include <stdio.h>

yyerror (char *s)  /* Called by yyparse on error */
{
  printf ("Error: %s\n", s);
}
