a(X):-b(X),c(X).
b(1).
b(4).
c(X):-d(X),!,e(X).
c(X):-f(X).
d(X):-g(X).
d(X):-h(X).
e(3).
f(4).
g(2).
h(1).

/* min(?X,?Y,?Min) finds the minimum of X and Y */
min(X,Y,X):- X=<Y.
min(X,Y,Y):- Y<X.

/* this is more efficient and correct - green cut */
min1(X,Y,X):- X=<Y,!.
min1(X,Y,Y):- Y<X,!.

/* this is incorrect - red cut 
    example ?-min(2,5,5) returns yes */
min2(X,Y,X):- X=<Y,!.
min2(X,Y,Y).

/* this is correct but hard to read - green cut */
min3(X,Y,Z):- X=<Y,!,Z=X.
min3(X,Y,Y).


/* member(?X,?L) */
member(X,[X|_]).
member(X,[_|L]):-member(X,L).

/* this is more efficient but incorrect - red cut 
   example ?-member(X,[1,2,3]) will return X=1 and fail after 
   This is a variant of the membercheck predicate listed below */
member1(X,[X|_]):-!.
member1(X,[_|L]):-member(X,L).

/* membercheck(+X,+L) check if X is a member of L */
membercheck(X,[X|_]).
membercheck(X,[Y|L]):- \+Y=X,membercheck(X,L).

/* more efficient but incorrect - red cut 
   example ?- membercheck(X,[1,2,3]). returns X=1  */
membercheck1(X,[X|_]):-!.
membercheck1(X,[Y|L]):-membercheck(X,L).
